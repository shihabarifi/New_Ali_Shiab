// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using POS.Data;

#nullable disable

namespace POS.Migrations
{
    [DbContext(typeof(posDbContext))]
    [Migration("20230404143302_Firstdb")]
    partial class Firstdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("POS.Models.DB.AccountingManual", b =>
                {
                    b.Property<string>("AccNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccKind")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccLevel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("AccMaxBalane")
                        .HasColumnType("float");

                    b.Property<string>("AccStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArabicAccName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnglishAccName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FinalAccountType")
                        .HasColumnType("int")
                        .HasColumnName("final_Account_Type");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_Year");

                    b.Property<string>("ParentAccNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("AccNumber");

                    b.HasIndex("FinalAccountType");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("ParentAccNumber");

                    b.ToTable("Accounting_Manual");
                });

            modelBuilder.Entity("POS.Models.DB.AccountsCurrency", b =>
                {
                    b.Property<int>("AccountsCurrenciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Accounts_Currencies_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountsCurrenciesId"), 1L, 1);

                    b.Property<string>("AccountingManual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accounting_manual");

                    b.Property<int>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("OpeningBalance")
                        .HasColumnType("float")
                        .HasColumnName("opening_Balance");

                    b.Property<string>("SystemUser")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_User");

                    b.HasKey("AccountsCurrenciesId");

                    b.HasIndex("AccountingManual");

                    b.HasIndex("Currencies");

                    b.ToTable("Accounts_Currencies");
                });

            modelBuilder.Entity("POS.Models.DB.ActivityType", b =>
                {
                    b.Property<int>("ActivitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Activit_Type_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivitTypeId"), 1L, 1);

                    b.Property<string>("ActivityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActivitTypeId");

                    b.ToTable("Activity_Type");
                });

            modelBuilder.Entity("POS.Models.DB.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Bank_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"), 1L, 1);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BankStatus")
                        .HasColumnType("int");

                    b.Property<string>("SubAccountingManual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sub_accounting_manual");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("BankId");

                    b.HasIndex("SubAccountingManual");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("POS.Models.DB.CheckExpensVoucher", b =>
                {
                    b.Property<string>("CheckExpensVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Check_ExpensVoucherNumber");

                    b.Property<int>("Banks")
                        .HasColumnType("int")
                        .HasColumnName("banks");

                    b.Property<DateTime?>("CheckDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CheckExpendCheques")
                        .HasColumnType("int")
                        .HasColumnName("Check_Expend_cheques");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CheckStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChequesDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequesType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("CreditAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_RLY");

                    b.Property<double?>("CreditAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_UDO");

                    b.Property<int>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<string>("DebitChildAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DebittAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_RLY");

                    b.Property<double?>("DebittAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_UDO");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_Year");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("CheckExpensVoucherNumber");

                    b.HasIndex("Banks");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("DebitChildAccount");

                    b.HasIndex("FiscalYear");

                    b.ToTable("Check_Expens_Voucher");
                });

            modelBuilder.Entity("POS.Models.DB.CheckPaycheckVoucher", b =>
                {
                    b.Property<string>("CheckPaycheckVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Check_PaycheckVoucherNumber");

                    b.Property<int>("Banks")
                        .HasColumnType("int")
                        .HasColumnName("banks");

                    b.Property<DateTime?>("CheckDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CheckPayCheckCheques")
                        .HasColumnType("int")
                        .HasColumnName("Check_PayCheck_cheques");

                    b.Property<int>("CheckStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChequesDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequesType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("CreditAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_RLY");

                    b.Property<double?>("CreditAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_UDO");

                    b.Property<string>("CreditChildAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<double>("DebittAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_RLY");

                    b.Property<double?>("DebittAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_UDO");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_Year");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("CheckPaycheckVoucherNumber");

                    b.HasIndex("Banks");

                    b.HasIndex("CreditChildAccount");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("FiscalYear");

                    b.ToTable("Check_Paycheck_Voucher");
                });

            modelBuilder.Entity("POS.Models.DB.CompanyProfile", b =>
                {
                    b.Property<int>("CompanyProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Profile_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyProfileId"), 1L, 1);

                    b.Property<string>("CompanyIcon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyProfileId");

                    b.ToTable("Company_Profile");
                });

            modelBuilder.Entity("POS.Models.DB.CurrenciesExchangeRate", b =>
                {
                    b.Property<int>("CurrenciesExchangeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Currencies_Exchange_Rate_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrenciesExchangeRateId"), 1L, 1);

                    b.Property<DateTime?>("CurreExchangeDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("CurreExchangeRate")
                        .HasColumnType("float");

                    b.Property<int?>("CurreExhhangeStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_users");

                    b.HasKey("CurrenciesExchangeRateId");

                    b.HasIndex("Currencies");

                    b.ToTable("Currencies_Exchange_Rate");
                });

            modelBuilder.Entity("POS.Models.DB.Currency", b =>
                {
                    b.Property<int>("CurrenciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Currencies_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrenciesId"), 1L, 1);

                    b.Property<string>("CrreChangeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrStatus")
                        .HasColumnType("int");

                    b.Property<string>("CurreSymbol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurreType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrenName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("CurrenciesId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedExpensVoucher", b =>
                {
                    b.Property<int>("DetailedExpensVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Detailed_Expens_Voucher_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailedExpensVoucherId"), 1L, 1);

                    b.Property<string>("DebitChildAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DetailedExpensVoucherAmountDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DetailedExpensVoucherAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DetailedExpensVoucherAmount_RLY");

                    b.Property<double?>("DetailedExpensVoucherAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("DetailedExpensVoucherAmount_UDO");

                    b.Property<string>("MainExpensVoucherNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("main_expens_voucher_number");

                    b.HasKey("DetailedExpensVoucherId");

                    b.HasIndex("DebitChildAccount");

                    b.HasIndex("MainExpensVoucherNumber");

                    b.ToTable("Detailed_Expens_Voucher");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedJournalEntery", b =>
                {
                    b.Property<int>("DetailedJournalEnteriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Detailed_Journal_Enteries_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailedJournalEnteriesId"), 1L, 1);

                    b.Property<double?>("CreditAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_RLY");

                    b.Property<double?>("CreditAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_UDO");

                    b.Property<string>("CreditChildAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int?>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<string>("DebitChildAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("DebittAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_RLY");

                    b.Property<double?>("DebittAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_UDO");

                    b.Property<string>("DetailedournalDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MainJournalEnteries")
                        .HasColumnType("int")
                        .HasColumnName("main_journal_enteries");

                    b.HasKey("DetailedJournalEnteriesId");

                    b.HasIndex("CreditChildAccount");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("DebitChildAccount");

                    b.HasIndex("MainJournalEnteries");

                    b.ToTable("Detailed_Journal_Enteries");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedPayCheck", b =>
                {
                    b.Property<int>("DetailedPayCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Detailed_PayCheck_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailedPayCheckId"), 1L, 1);

                    b.Property<string>("CreditChildAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DetailedPaycheckAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DetailedPaycheckAmount_RLY");

                    b.Property<double?>("DetailedPaycheckAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("DetailedPaycheckAmount_UDO");

                    b.Property<string>("DetailedPaycheckrDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainPaycheck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("main_paycheck");

                    b.HasKey("DetailedPayCheckId");

                    b.HasIndex("CreditChildAccount");

                    b.HasIndex("MainPaycheck");

                    b.ToTable("Detailed_PayCheck");
                });

            modelBuilder.Entity("POS.Models.DB.FinalAccountType", b =>
                {
                    b.Property<int>("FinalAccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Final_Account_Type_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalAccountTypeId"), 1L, 1);

                    b.Property<string>("FinAccType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FinalAccountTypeId");

                    b.ToTable("Final_Account_Type");
                });

            modelBuilder.Entity("POS.Models.DB.FiscalYear", b =>
                {
                    b.Property<int>("FiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Fiscal_Year_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FiscalYearId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FiscalYearName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FiscalYearStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("FiscalYearId");

                    b.ToTable("Fiscal_Year");
                });

            modelBuilder.Entity("POS.Models.DB.Fund", b =>
                {
                    b.Property<int>("FundsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Funds_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundsId"), 1L, 1);

                    b.Property<string>("FundName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FundStatus")
                        .HasColumnType("int");

                    b.Property<string>("SubAccountingManual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sub_accounting_manual");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.HasKey("FundsId");

                    b.HasIndex("SubAccountingManual");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("POS.Models.DB.GeneralLedger", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("General_Ledger_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralLedgerId"), 1L, 1);

                    b.Property<string>("AccountingManual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accounting_manual");

                    b.Property<string>("CheckExpensVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Check_ExpensVoucher_Number");

                    b.Property<string>("CheckPayCheckVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Check_PayCheckVoucher_Number");

                    b.Property<double?>("CreditAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmount_RLY");

                    b.Property<double?>("CreditAmountWithTransCurre")
                        .HasColumnType("float")
                        .HasColumnName("CreditAmountWith_TransCurre");

                    b.Property<int?>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<double?>("DebitAmountWithTransCurre")
                        .HasColumnType("float")
                        .HasColumnName("DebitAmountWith_TransCurre");

                    b.Property<double?>("DebittAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("DebittAmount_RLY");

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_year");

                    b.Property<DateTime?>("GenLedgerDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("MainExpensVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Main_Expens_Voucher_Number");

                    b.Property<int?>("MainJournalEnteriesId")
                        .HasColumnType("int")
                        .HasColumnName("Main_Journal_Enteries_id");

                    b.Property<string>("MainPayCheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Main_PayCheck_Number");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_Users");

                    b.Property<int?>("TransactionIsStage")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_Is_Stage");

                    b.Property<string>("TransactionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeneralLedgerId");

                    b.HasIndex("AccountingManual");

                    b.HasIndex("CheckExpensVoucherNumber");

                    b.HasIndex("CheckPayCheckVoucherNumber");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("MainExpensVoucherNumber");

                    b.HasIndex("MainJournalEnteriesId");

                    b.HasIndex("MainPayCheckNumber");

                    b.ToTable("General_Ledger");
                });

            modelBuilder.Entity("POS.Models.DB.JournalEnterieType", b =>
                {
                    b.Property<int>("JournalEnterieTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Journal_Enterie_Types_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEnterieTypesId"), 1L, 1);

                    b.Property<string>("JournalEnteryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JournalEnterieTypesId");

                    b.ToTable("Journal_Enterie_Types");
                });

            modelBuilder.Entity("POS.Models.DB.MainExpensVoucher", b =>
                {
                    b.Property<string>("MainExpensVoucherNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Main_ExpensVoucher_Number");

                    b.Property<int>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_year");

                    b.Property<int>("Funds")
                        .HasColumnType("int")
                        .HasColumnName("funds");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<double>("MainExpensVoucherAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("MainExpensVoucherAmount_RLY");

                    b.Property<double?>("MainExpensVoucherAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("MainExpensVoucherAmount_UDO");

                    b.Property<DateTime?>("MainExpensVoucherDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MainExpensVoucherStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_users");

                    b.HasKey("MainExpensVoucherNumber");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("Funds");

                    b.ToTable("Main_Expens_Voucher");
                });

            modelBuilder.Entity("POS.Models.DB.MainJournalEntery", b =>
                {
                    b.Property<int>("MainJournalEnteriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Main_Journal_Enteries_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainJournalEnteriesId"), 1L, 1);

                    b.Property<int?>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_year");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("isDeleted");

                    b.Property<int>("IsStage")
                        .HasColumnType("int")
                        .HasColumnName("isStage");

                    b.Property<int?>("JournalEnterieTypes")
                        .HasColumnType("int")
                        .HasColumnName("journal_enterie_types");

                    b.Property<string>("MainJouralEntNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Main_Joural_Ent_Number");

                    b.Property<DateTime?>("MainJournalDateTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("MainJournalEnteriesAmount")
                        .HasColumnType("float");

                    b.Property<int>("MainJournalReferenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("MainPaycheckGlobalNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MainournalEnteriesStatus")
                        .HasColumnType("int");

                    b.Property<string>("SystemUsers")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_users");

                    b.HasKey("MainJournalEnteriesId");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("JournalEnterieTypes");

                    b.ToTable("Main_Journal_Enteries");
                });

            modelBuilder.Entity("POS.Models.DB.MainPayCheck", b =>
                {
                    b.Property<string>("MainPaycheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Currencies")
                        .HasColumnType("int")
                        .HasColumnName("currencies");

                    b.Property<int?>("CurrenciesExchangeRate")
                        .HasColumnType("int")
                        .HasColumnName("currencies_exchange_rate");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnName("fiscal_year");

                    b.Property<int>("Funds")
                        .HasColumnType("int")
                        .HasColumnName("funds");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<double>("MainPaycheckAmountRly")
                        .HasColumnType("float")
                        .HasColumnName("MainPaycheckAmount_RLY");

                    b.Property<double?>("MainPaycheckAmountUdo")
                        .HasColumnType("float")
                        .HasColumnName("MainPaycheckAmount_UDO");

                    b.Property<DateTime?>("MainPaycheckDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MainPaycheckStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("SystemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("system_users");

                    b.HasKey("MainPaycheckNumber");

                    b.HasIndex("Currencies");

                    b.HasIndex("CurrenciesExchangeRate");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("Funds");

                    b.ToTable("Main_PayCheck");
                });

            modelBuilder.Entity("POS.Models.DB.TransactionsActivity", b =>
                {
                    b.Property<int>("TransactionsActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Transactions_Activity_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionsActivityId"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("activity_type");

                    b.Property<string>("CheckExpens")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("check_expens");

                    b.Property<string>("CheckPaycheck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("check_Paycheck");

                    b.Property<int>("GeneralLedger")
                        .HasColumnType("int")
                        .HasColumnName("general_ledger");

                    b.Property<string>("MainExpensVoucher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("main_expens_voucher");

                    b.Property<int>("MainJournalEnteries")
                        .HasColumnType("int")
                        .HasColumnName("main_journal_enteries");

                    b.Property<string>("MainPayCheck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("main_PayCheck");

                    b.Property<string>("SysyemUsers")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("sysyem_Users");

                    b.HasKey("TransactionsActivityId");

                    b.HasIndex("ActivityType");

                    b.HasIndex("CheckExpens");

                    b.HasIndex("CheckPaycheck");

                    b.HasIndex("GeneralLedger");

                    b.HasIndex("MainExpensVoucher");

                    b.HasIndex("MainJournalEnteries");

                    b.HasIndex("MainPayCheck");

                    b.ToTable("Transactions_Activity");
                });

            modelBuilder.Entity("POS.Models.DB.VwUser", b =>
                {
                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToView("VwUsers");
                });

            modelBuilder.Entity("pos.ViewModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("pos.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("pos.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pos.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("pos.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POS.Models.DB.AccountingManual", b =>
                {
                    b.HasOne("POS.Models.DB.FinalAccountType", "FinalAccountTypeNavigation")
                        .WithMany("AccountingManuals")
                        .HasForeignKey("FinalAccountType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("AccountingManuals")
                        .HasForeignKey("FiscalYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.AccountingManual", "ParentAccNumberNavigation")
                        .WithMany("InverseParentAccNumberNavigation")
                        .HasForeignKey("ParentAccNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalAccountTypeNavigation");

                    b.Navigation("FiscalYearNavigation");

                    b.Navigation("ParentAccNumberNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.AccountsCurrency", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "AccountingManualNavigation")
                        .WithMany("AccountsCurrencies")
                        .HasForeignKey("AccountingManual")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("AccountsCurrencies")
                        .HasForeignKey("Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingManualNavigation");

                    b.Navigation("CurrenciesNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.Bank", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "SubAccountingManualNavigation")
                        .WithMany("Banks")
                        .HasForeignKey("SubAccountingManual")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubAccountingManualNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.CheckExpensVoucher", b =>
                {
                    b.HasOne("POS.Models.DB.Bank", "BanksNavigation")
                        .WithMany("CheckExpensVouchers")
                        .HasForeignKey("Banks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("CheckExpensVouchers")
                        .HasForeignKey("Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("CheckExpensVouchers")
                        .HasForeignKey("CurrenciesExchangeRate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.AccountingManual", "DebitChildAccountNavigation")
                        .WithMany("CheckExpensVouchers")
                        .HasForeignKey("DebitChildAccount");

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("CheckExpensVouchers")
                        .HasForeignKey("FiscalYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BanksNavigation");

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("DebitChildAccountNavigation");

                    b.Navigation("FiscalYearNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.CheckPaycheckVoucher", b =>
                {
                    b.HasOne("POS.Models.DB.Bank", "BanksNavigation")
                        .WithMany("CheckPaycheckVouchers")
                        .HasForeignKey("Banks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.AccountingManual", "CreditChildAccountNavigation")
                        .WithMany("CheckPaycheckVouchers")
                        .HasForeignKey("CreditChildAccount");

                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("CheckPaycheckVouchers")
                        .HasForeignKey("Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("CheckPaycheckVouchers")
                        .HasForeignKey("CurrenciesExchangeRate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("CheckPaycheckVouchers")
                        .HasForeignKey("FiscalYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BanksNavigation");

                    b.Navigation("CreditChildAccountNavigation");

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("FiscalYearNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.CurrenciesExchangeRate", b =>
                {
                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("CurrenciesExchangeRates")
                        .HasForeignKey("Currencies");

                    b.Navigation("CurrenciesNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedExpensVoucher", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "DebitChildAccountNavigation")
                        .WithMany("DetailedExpensVouchers")
                        .HasForeignKey("DebitChildAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.MainExpensVoucher", "MainExpensVoucherNumberNavigation")
                        .WithMany("DetailedExpensVouchers")
                        .HasForeignKey("MainExpensVoucherNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DebitChildAccountNavigation");

                    b.Navigation("MainExpensVoucherNumberNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedJournalEntery", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "CreditChildAccountNavigation")
                        .WithMany("DetailedJournalEnteryCreditChildAccountNavigations")
                        .HasForeignKey("CreditChildAccount");

                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("DetailedJournalEnteries")
                        .HasForeignKey("Currencies");

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("DetailedJournalEnteries")
                        .HasForeignKey("CurrenciesExchangeRate");

                    b.HasOne("POS.Models.DB.AccountingManual", "DebitChildAccountNavigation")
                        .WithMany("DetailedJournalEnteryDebitChildAccountNavigations")
                        .HasForeignKey("DebitChildAccount");

                    b.HasOne("POS.Models.DB.MainJournalEntery", "MainJournalEnteriesNavigation")
                        .WithMany("DetailedJournalEnteries")
                        .HasForeignKey("MainJournalEnteries");

                    b.Navigation("CreditChildAccountNavigation");

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("DebitChildAccountNavigation");

                    b.Navigation("MainJournalEnteriesNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.DetailedPayCheck", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "CreditChildAccountNavigation")
                        .WithMany("DetailedPayChecks")
                        .HasForeignKey("CreditChildAccount");

                    b.HasOne("POS.Models.DB.MainPayCheck", "MainPaycheckNavigation")
                        .WithMany("DetailedPayChecks")
                        .HasForeignKey("MainPaycheck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditChildAccountNavigation");

                    b.Navigation("MainPaycheckNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.Fund", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "SubAccountingManualNavigation")
                        .WithMany("Funds")
                        .HasForeignKey("SubAccountingManual");

                    b.Navigation("SubAccountingManualNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.GeneralLedger", b =>
                {
                    b.HasOne("POS.Models.DB.AccountingManual", "AccountingManualNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("AccountingManual");

                    b.HasOne("POS.Models.DB.CheckExpensVoucher", "CheckExpensVoucherNumberNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("CheckExpensVoucherNumber");

                    b.HasOne("POS.Models.DB.CheckPaycheckVoucher", "CheckPayCheckVoucherNumberNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("CheckPayCheckVoucherNumber");

                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("Currencies");

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("CurrenciesExchangeRate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("FiscalYear");

                    b.HasOne("POS.Models.DB.MainExpensVoucher", "MainExpensVoucherNumberNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("MainExpensVoucherNumber");

                    b.HasOne("POS.Models.DB.MainJournalEntery", "MainJournalEnteries")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("MainJournalEnteriesId");

                    b.HasOne("POS.Models.DB.MainPayCheck", "MainPayCheckNumberNavigation")
                        .WithMany("GeneralLedgers")
                        .HasForeignKey("MainPayCheckNumber");

                    b.Navigation("AccountingManualNavigation");

                    b.Navigation("CheckExpensVoucherNumberNavigation");

                    b.Navigation("CheckPayCheckVoucherNumberNavigation");

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("FiscalYearNavigation");

                    b.Navigation("MainExpensVoucherNumberNavigation");

                    b.Navigation("MainJournalEnteries");

                    b.Navigation("MainPayCheckNumberNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.MainExpensVoucher", b =>
                {
                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("MainExpensVouchers")
                        .HasForeignKey("Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("MainExpensVouchers")
                        .HasForeignKey("CurrenciesExchangeRate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("MainExpensVouchers")
                        .HasForeignKey("FiscalYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.Fund", "FundsNavigation")
                        .WithMany("MainExpensVouchers")
                        .HasForeignKey("Funds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("FiscalYearNavigation");

                    b.Navigation("FundsNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.MainJournalEntery", b =>
                {
                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("MainJournalEnteries")
                        .HasForeignKey("FiscalYear");

                    b.HasOne("POS.Models.DB.JournalEnterieType", "JournalEnterieTypesNavigation")
                        .WithMany("MainJournalEnteries")
                        .HasForeignKey("JournalEnterieTypes");

                    b.Navigation("FiscalYearNavigation");

                    b.Navigation("JournalEnterieTypesNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.MainPayCheck", b =>
                {
                    b.HasOne("POS.Models.DB.Currency", "CurrenciesNavigation")
                        .WithMany("MainPayChecks")
                        .HasForeignKey("Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CurrenciesExchangeRate", "CurrenciesExchangeRateNavigation")
                        .WithMany("MainPayChecks")
                        .HasForeignKey("CurrenciesExchangeRate");

                    b.HasOne("POS.Models.DB.FiscalYear", "FiscalYearNavigation")
                        .WithMany("MainPayChecks")
                        .HasForeignKey("FiscalYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.Fund", "FundsNavigation")
                        .WithMany("MainPayChecks")
                        .HasForeignKey("Funds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrenciesExchangeRateNavigation");

                    b.Navigation("CurrenciesNavigation");

                    b.Navigation("FiscalYearNavigation");

                    b.Navigation("FundsNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.TransactionsActivity", b =>
                {
                    b.HasOne("POS.Models.DB.ActivityType", "ActivityTypeNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("ActivityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CheckExpensVoucher", "CheckExpensNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("CheckExpens")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.CheckPaycheckVoucher", "CheckPaycheckNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("CheckPaycheck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.GeneralLedger", "GeneralLedgerNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("GeneralLedger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.MainExpensVoucher", "MainExpensVoucherNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("MainExpensVoucher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.MainJournalEntery", "MainJournalEnteriesNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("MainJournalEnteries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Models.DB.MainPayCheck", "MainPayCheckNavigation")
                        .WithMany("TransactionsActivities")
                        .HasForeignKey("MainPayCheck")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityTypeNavigation");

                    b.Navigation("CheckExpensNavigation");

                    b.Navigation("CheckPaycheckNavigation");

                    b.Navigation("GeneralLedgerNavigation");

                    b.Navigation("MainExpensVoucherNavigation");

                    b.Navigation("MainJournalEnteriesNavigation");

                    b.Navigation("MainPayCheckNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.AccountingManual", b =>
                {
                    b.Navigation("AccountsCurrencies");

                    b.Navigation("Banks");

                    b.Navigation("CheckExpensVouchers");

                    b.Navigation("CheckPaycheckVouchers");

                    b.Navigation("DetailedExpensVouchers");

                    b.Navigation("DetailedJournalEnteryCreditChildAccountNavigations");

                    b.Navigation("DetailedJournalEnteryDebitChildAccountNavigations");

                    b.Navigation("DetailedPayChecks");

                    b.Navigation("Funds");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("InverseParentAccNumberNavigation");
                });

            modelBuilder.Entity("POS.Models.DB.ActivityType", b =>
                {
                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.Bank", b =>
                {
                    b.Navigation("CheckExpensVouchers");

                    b.Navigation("CheckPaycheckVouchers");
                });

            modelBuilder.Entity("POS.Models.DB.CheckExpensVoucher", b =>
                {
                    b.Navigation("GeneralLedgers");

                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.CheckPaycheckVoucher", b =>
                {
                    b.Navigation("GeneralLedgers");

                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.CurrenciesExchangeRate", b =>
                {
                    b.Navigation("CheckExpensVouchers");

                    b.Navigation("CheckPaycheckVouchers");

                    b.Navigation("DetailedJournalEnteries");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("MainExpensVouchers");

                    b.Navigation("MainPayChecks");
                });

            modelBuilder.Entity("POS.Models.DB.Currency", b =>
                {
                    b.Navigation("AccountsCurrencies");

                    b.Navigation("CheckExpensVouchers");

                    b.Navigation("CheckPaycheckVouchers");

                    b.Navigation("CurrenciesExchangeRates");

                    b.Navigation("DetailedJournalEnteries");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("MainExpensVouchers");

                    b.Navigation("MainPayChecks");
                });

            modelBuilder.Entity("POS.Models.DB.FinalAccountType", b =>
                {
                    b.Navigation("AccountingManuals");
                });

            modelBuilder.Entity("POS.Models.DB.FiscalYear", b =>
                {
                    b.Navigation("AccountingManuals");

                    b.Navigation("CheckExpensVouchers");

                    b.Navigation("CheckPaycheckVouchers");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("MainExpensVouchers");

                    b.Navigation("MainJournalEnteries");

                    b.Navigation("MainPayChecks");
                });

            modelBuilder.Entity("POS.Models.DB.Fund", b =>
                {
                    b.Navigation("MainExpensVouchers");

                    b.Navigation("MainPayChecks");
                });

            modelBuilder.Entity("POS.Models.DB.GeneralLedger", b =>
                {
                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.JournalEnterieType", b =>
                {
                    b.Navigation("MainJournalEnteries");
                });

            modelBuilder.Entity("POS.Models.DB.MainExpensVoucher", b =>
                {
                    b.Navigation("DetailedExpensVouchers");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.MainJournalEntery", b =>
                {
                    b.Navigation("DetailedJournalEnteries");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("TransactionsActivities");
                });

            modelBuilder.Entity("POS.Models.DB.MainPayCheck", b =>
                {
                    b.Navigation("DetailedPayChecks");

                    b.Navigation("GeneralLedgers");

                    b.Navigation("TransactionsActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
